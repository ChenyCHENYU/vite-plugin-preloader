// ============================================================================
// ⚡ src/runtime.ts - 运行时代码模板（字符串）
// ============================================================================

export const runtimeTemplate = `// 🚀 Auto-generated by vite-plugin-preloader
import { ref, defineComponent, h, onMounted } from 'vue'

interface PreloadRoute {
  path: string
  component: () => Promise<any>
  reason: string
  priority: number
}

interface PreloadStats {
  total: number
  completed: number
  failed: number
  startTime: number
  endTime: number
}

// 🎯 预加载配置（构建时注入）
const PRELOAD_ROUTES = __PRELOAD_ROUTES__
const PRELOAD_OPTIONS = __PRELOAD_OPTIONS__

class PreloaderManager {
  private preloadedRoutes = new Set()
  private isPreloading = ref(false)
  private stats = ref({
    total: 0, completed: 0, failed: 0, startTime: 0, endTime: 0
  })

  async start() {
    if (this.isPreloading.value) return

    this.isPreloading.value = true
    this.stats.value = {
      total: PRELOAD_ROUTES.length,
      completed: 0, failed: 0,
      startTime: Date.now(), endTime: 0
    }

    console.log(\`🚀 [预加载] 开始预加载 \${PRELOAD_ROUTES.length} 个页面\`)

    const sortedRoutes = [...PRELOAD_ROUTES].sort((a, b) => a.priority - b.priority)
    
    for (const route of sortedRoutes) {
      await this.preloadSingle(route)
      await this.sleep(100)
    }

    this.stats.value.endTime = Date.now()
    this.isPreloading.value = false
    
    console.log(\`🎉 [预加载] 完成! 耗时 \${this.stats.value.endTime - this.stats.value.startTime}ms\`)
  }

  async preloadSingle(route) {
    if (this.preloadedRoutes.has(route.path)) return

    try {
      const startTime = Date.now()
      await route.component()
      const loadTime = Date.now() - startTime
      
      this.preloadedRoutes.add(route.path)
      this.stats.value.completed++
      console.log(\`✅ [预加载] \${route.path} (\${loadTime}ms) - \${route.reason}\`)
    } catch (error) {
      this.stats.value.failed++
      console.error(\`❌ [预加载] \${route.path} 失败:\`, error)
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  isPreloaded(path) {
    return this.preloadedRoutes.has(path)
  }

  getStats() {
    return {
      ...this.stats.value,
      preloadedPaths: Array.from(this.preloadedRoutes),
      isPreloading: this.isPreloading.value
    }
  }

  createStatusComponent() {
    const self = this
    return defineComponent({
      name: 'PreloadStatus',
      setup() {
        onMounted(() => {
          if (!document.getElementById('preloader-styles')) {
            const style = document.createElement('style')
            style.id = 'preloader-styles'
            const position = PRELOAD_OPTIONS.statusPosition.replace('-', ': 20px; ') + ': 20px;'
            style.textContent = \`
              .preloader-status {
                position: fixed; \${position}
                background: rgba(0,0,0,0.8); color: white; padding: 8px 16px;
                border-radius: 6px; font-size: 12px; z-index: 9999;
                pointer-events: none; font-family: system-ui;
              }
            \`
            document.head.appendChild(style)
          }
        })

        return () => {
          if (!self.isPreloading.value || !import.meta.env.DEV || !PRELOAD_OPTIONS.showStatus) {
            return null
          }
          return h('div', { class: 'preloader-status' }, [
            '🔄 正在优化页面... ',
            \`\${self.stats.value.completed}/\${self.stats.value.total}\`
          ])
        }
      }
    })
  }
}

// 🚀 全局实例
const preloader = new PreloaderManager()

// 🛠️ 开发环境调试工具
if (import.meta.env.DEV && PRELOAD_OPTIONS.debug) {
  window.preloaderDebug = {
    stats: () => preloader.getStats(),
    restart: () => preloader.start(),
    check: (path) => preloader.isPreloaded(path),
    help: () => console.log('🛠️ 预加载调试: stats() | restart() | check(path)')
  }
  console.log('🛠️ 预加载调试工具: window.preloaderDebug')
}

// 🎯 导出
export const usePreloader = () => ({
  start: () => preloader.start(),
  isPreloaded: (path) => preloader.isPreloaded(path),
  StatusComponent: preloader.createStatusComponent()
})

// 🚀 自动启动
if (typeof window !== 'undefined') {
  setTimeout(() => preloader.start(), PRELOAD_OPTIONS.delay || 2000)
}`