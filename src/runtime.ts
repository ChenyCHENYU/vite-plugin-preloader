// ============================================================================
// ⚡ src/runtime.ts - 运行时代码模板（字符串）
// ============================================================================
export const runtimeTemplate = `// 🚀 Auto-generated by vite-plugin-preloader
(function() {
  'use strict';
  
  // 🎯 预加载配置（构建时注入）
  const PRELOAD_ROUTES = __PRELOAD_ROUTES__
  const PRELOAD_OPTIONS = __PRELOAD_OPTIONS__

  class PreloaderManager {
    constructor() {
      this.preloadedRoutes = new Set()
      this.isPreloading = false
      this.stats = {
        total: 0, completed: 0, failed: 0, startTime: 0, endTime: 0
      }
    }

    async start() {
      if (this.isPreloading) return

      this.isPreloading = true
      this.stats = {
        total: PRELOAD_ROUTES.length,
        completed: 0, failed: 0,
        startTime: Date.now(), endTime: 0
      }

      if (PRELOAD_OPTIONS.debug) {
        console.log(\`🚀 [预加载] 开始预加载 \${PRELOAD_ROUTES.length} 个页面\`)
      }

      const sortedRoutes = [...PRELOAD_ROUTES].sort((a, b) => a.priority - b.priority)
      
      for (const route of sortedRoutes) {
        await this.preloadSingle(route)
        await this.sleep(100)
      }

      this.stats.endTime = Date.now()
      this.isPreloading = false
      
      if (PRELOAD_OPTIONS.debug) {
        console.log(\`🎉 [预加载] 完成! 耗时 \${this.stats.endTime - this.stats.startTime}ms\`)
      }
    }

    async preloadSingle(route) {
      if (this.preloadedRoutes.has(route.path)) return

      try {
        const startTime = Date.now()
        let componentPath = route.component
        
        // 在开发环境中，Vite 会处理模块解析
        // 我们需要使用正确的模块 ID
        if (componentPath.startsWith('@/')) {
          // 对于 Vite，@ 别名应该在构建时就被解析
          // 但在运行时我们需要使用实际的路径
          componentPath = componentPath.replace('@/', '/src/')
        }
        
        // 确保路径以 / 开头（相对于项目根目录）
        if (!componentPath.startsWith('/') && !componentPath.startsWith('./')) {
          componentPath = '/' + componentPath
        }
        
        if (PRELOAD_OPTIONS.debug) {
          console.log(\`🔍 [预加载] 尝试加载: \${componentPath}\`)
        }
        
        const module = await import(/* @vite-ignore */ componentPath)
        const loadTime = Date.now() - startTime
        
        this.preloadedRoutes.add(route.path)
        this.stats.completed++
        
        if (PRELOAD_OPTIONS.debug) {
          console.log(\`✅ [预加载] \${route.path} (\${loadTime}ms) - \${route.reason}\`)
        }
      } catch (error) {
        this.stats.failed++
        if (PRELOAD_OPTIONS.debug) {
          console.error(\`❌ [预加载] \${route.path} 失败:\`, error)
        }
      }
    }

    sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms))
    }

    isPreloaded(path) {
      return this.preloadedRoutes.has(path)
    }

    getStats() {
      return {
        ...this.stats,
        preloadedPaths: Array.from(this.preloadedRoutes),
        isPreloading: this.isPreloading
      }
    }
  }

  // 🚀 全局实例
  const preloader = new PreloaderManager()

  // 🛠️ 开发环境调试工具
  if (PRELOAD_OPTIONS.debug) {
    window.preloaderDebug = {
      stats: () => preloader.getStats(),
      restart: () => preloader.start(),
      check: (path) => preloader.isPreloaded(path),
      help: () => console.log('🛠️ 预加载调试: stats() | restart() | check(path)')
    }
    console.log('🛠️ 预加载调试工具: window.preloaderDebug')
  }

  // 🚀 自动启动 - 等待 DOM 加载完成
  function autoStart() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => preloader.start(), PRELOAD_OPTIONS.delay)
      })
    } else {
      setTimeout(() => preloader.start(), PRELOAD_OPTIONS.delay)
    }
  }

  // 立即执行自动启动
  autoStart()

  // 导出到全局（可选使用）
  window.usePreloader = () => ({
    start: () => preloader.start(),
    isPreloaded: (path) => preloader.isPreloaded(path),
    getStats: () => preloader.getStats()
  })

})();`